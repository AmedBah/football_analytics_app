import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from statsbombpy import sb
import sys
import os
import matplotlib.patches as patches

# Ajouter le r√©pertoire parent au chemin pour importer les fonctions utilitaires
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from utils.data_loader import load_competitions, load_matches, load_teams, load_events, load_filtered_events

# Configuration de la page
st.set_page_config(
    page_title="Analyse Tactique Avanc√©e",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Styles CSS personnalis√©s
st.markdown("""
<style>
    .main-header {
        font-size: 2rem;
        color: #1E88E5;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.5rem;
        color: #424242;
        margin-bottom: 1rem;
    }
    .card {
        background-color: #f9f9f9;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }
    .metric-container {
        background-color: #e3f2fd;
        border-radius: 5px;
        padding: 10px;
        text-align: center;
        margin-bottom: 10px;
    }
    .metric-value {
        font-size: 1.8rem;
        font-weight: bold;
        color: #1976D2;
    }
    .metric-label {
        font-size: 0.9rem;
        color: #424242;
    }
</style>
""", unsafe_allow_html=True)

# Titre de la page
st.markdown("<h1 class='main-header'>üîç Analyse Tactique Avanc√©e</h1>", unsafe_allow_html=True)

# Barre lat√©rale pour les filtres
st.sidebar.header("Filtres")

# Chargement des comp√©titions
try:
    competitions = load_competitions()
    
    # S√©lection de la comp√©tition
    competition_options = competitions[['competition_id', 'competition_name', 'season_id', 'season_name']].drop_duplicates()
    competition_options['display_name'] = competition_options['competition_name'] + ' - ' + competition_options['season_name']
    
    selected_competition = st.sidebar.selectbox(
        "S√©lectionner une comp√©tition",
        options=competition_options['display_name'].tolist(),
        index=0
    )
    
    # R√©cup√©rer les IDs de la comp√©tition et de la saison s√©lectionn√©es
    selected_comp_data = competition_options[competition_options['display_name'] == selected_competition]
    competition_id = selected_comp_data['competition_id'].values[0]
    season_id = selected_comp_data['season_id'].values[0]
    
    # Chargement des √©quipes
    teams = load_teams(competition_id, season_id)
    
    # S√©lection de l'√©quipe
    selected_team = st.sidebar.selectbox(
        "S√©lectionner une √©quipe",
        options=teams,
        index=0
    )
    
    # Chargement des matchs
    matches = load_matches(competition_id, season_id)
    
    # Filtrer les matchs pour l'√©quipe s√©lectionn√©e
    team_matches = matches[(matches['home_team'] == selected_team) | (matches['away_team'] == selected_team)]
    
    # S√©lection du match
    match_options = team_matches[['match_id', 'home_team', 'away_team', 'match_date']]
    match_options['display_name'] = match_options['match_date'].astype(str) + ': ' + match_options['home_team'] + ' vs ' + match_options['away_team']
    
    selected_match_display = st.sidebar.selectbox(
        "S√©lectionner un match",
        options=match_options['display_name'].tolist(),
        index=0
    )
    
    selected_match_id = match_options[match_options['display_name'] == selected_match_display]['match_id'].values[0]
    selected_match_home = match_options[match_options['display_name'] == selected_match_display]['home_team'].values[0]
    selected_match_away = match_options[match_options['display_name'] == selected_match_display]['away_team'].values[0]
    
    # Options d'analyse avanc√©e
    st.sidebar.header("Options d'analyse avanc√©e")
    
    analysis_period = st.sidebar.radio(
        "P√©riode d'analyse",
        options=["Match complet", "1√®re mi-temps", "2√®me mi-temps"],
        index=0
    )
    
    # Onglets pour les diff√©rentes analyses
    tab1, tab2, tab3, tab4 = st.tabs([
        "Analyse de Possession", 
        "Analyse des Passes",
        "Analyse D√©fensive",
        "Analyse des Transitions"
    ])
    
    # Onglet 1: Analyse de Possession
    with tab1:
        st.markdown("<h2 class='sub-header'>Analyse de Possession</h2>", unsafe_allow_html=True)
        
        # Statistiques de possession
        st.subheader("Statistiques de possession")
        
        # G√©n√©rer des donn√©es fictives pour la possession
        home_possession = np.random.randint(35, 65)
        away_possession = 100 - home_possession
        
        col1, col2, col3 = st.columns([2, 1, 2])
        
        with col1:
            st.markdown(f"""
            <div class='metric-container'>
                <div class='metric-value'>{home_possession}%</div>
                <div class='metric-label'>{selected_match_home}</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("<div style='text-align: center; padding-top: 20px;'>vs</div>", unsafe_allow_html=True)
        
        with col3:
            st.markdown(f"""
            <div class='metric-container'>
                <div class='metric-value'>{away_possession}%</div>
                <div class='metric-label'>{selected_match_away}</div>
            </div>
            """, unsafe_allow_html=True)
        
        # Graphique de possession par p√©riode
        st.subheader("Possession par p√©riode")
        
        # G√©n√©rer des donn√©es fictives pour la possession par p√©riode
        periods = ["0-15'", "15-30'", "30-45'", "45-60'", "60-75'", "75-90'"]
        home_possession_periods = [np.random.randint(35, 65) for _ in range(len(periods))]
        away_possession_periods = [100 - p for p in home_possession_periods]
        
        possession_data = pd.DataFrame({
            'P√©riode': periods,
            selected_match_home: home_possession_periods,
            selected_match_away: away_possession_periods
        })
        
        fig = px.bar(
            possession_data,
            x='P√©riode',
            y=[selected_match_home, selected_match_away],
            barmode='stack',
            title="√âvolution de la possession par p√©riode"
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Carte de chaleur de la possession
        st.subheader("Carte de chaleur de la possession")
        
        # Cr√©er un terrain de football
        pitch_length = 120
        pitch_width = 80
        
        fig, ax = plt.subplots(figsize=(12, 8))
        
        # Dessiner le terrain
        # Rectangle principal
        ax.plot([0, 0, pitch_length, pitch_length, 0], [0, pitch_width, pitch_width, 0, 0], color='black')
        
        # Ligne m√©diane
        ax.plot([pitch_length/2, pitch_length/2], [0, pitch_width], color='black')
        
        # Cercle central
        central_circle = plt.Circle((pitch_length/2, pitch_width/2), 9.15, fill=False, color='black')
        ax.add_artist(central_circle)
        
        # Surfaces de r√©paration
        # Gauche
        ax.plot([0, 16.5, 16.5, 0], [pitch_width/2 - 20.15, pitch_width/2 - 20.15, pitch_width/2 + 20.15, pitch_width/2 + 20.15], color='black')
        # Droite
        ax.plot([pitch_length, pitch_length - 16.5, pitch_length - 16.5, pitch_length], [pitch_width/2 - 20.15, pitch_width/2 - 20.15, pitch_width/2 + 20.15, pitch_width/2 + 20.15], color='black')
        
        # Surfaces de but
        # Gauche
        ax.plot([0, 5.5, 5.5, 0], [pitch_width/2 - 9.16, pitch_width/2 - 9.16, pitch_width/2 + 9.16, pitch_width/2 + 9.16], color='black')
        # Droite
        ax.plot([pitch_length, pitch_length - 5.5, pitch_length - 5.5, pitch_length], [pitch_width/2 - 9.16, pitch_width/2 - 9.16, pitch_width/2 + 9.16, pitch_width/2 + 9.16], color='black')
        
        # Points de penalty
        ax.plot(11, pitch_width/2, marker='o', markersize=2, color='black')
        ax.plot(pitch_length - 11, pitch_width/2, marker='o', markersize=2, color='black')
        
        # G√©n√©rer des donn√©es fictives pour la heatmap de possession
        # Simuler une distribution de possession bas√©e sur l'√©quipe s√©lectionn√©e
        if selected_team == selected_match_home:
            # Si l'√©quipe s√©lectionn√©e est l'√©quipe √† domicile
            # Simuler une concentration plus √©lev√©e dans la moiti√© offensive
            x = np.concatenate([
                np.random.normal(pitch_length/4, pitch_length/8, 300),  # D√©fense
                np.random.normal(pitch_length/2, pitch_length/6, 500),  # Milieu
                np.random.normal(3*pitch_length/4, pitch_length/8, 200)  # Attaque
            ])
        else:
            # Si l'√©quipe s√©lectionn√©e est l'√©quipe √† l'ext√©rieur
            # Simuler une concentration plus √©lev√©e dans la moiti√© d√©fensive
            x = np.concatenate([
                np.random.normal(pitch_length/4, pitch_length/8, 500),  # D√©fense
                np.random.normal(pitch_length/2, pitch_length/6, 300),  # Milieu
                np.random.normal(3*pitch_length/4, pitch_length/8, 200)  # Attaque
            ])
        
        y = np.random.normal(pitch_width/2, pitch_width/3, len(x))
        
        # Cr√©er la heatmap
        heatmap = ax.hexbin(x, y, gridsize=30, cmap='YlOrRd', alpha=0.7)
        plt.colorbar(heatmap, ax=ax, label='Densit√© de possession')
        
        ax.set_xlim(-5, pitch_length + 5)
        ax.set_ylim(-5, pitch_width + 5)
        ax.set_title(f"Heatmap de possession - {selected_team}")
        ax.set_xlabel("Longueur du terrain (m)")
        ax.set_ylabel("Largeur du terrain (m)")
        ax.set_aspect('equal')
        
        # Afficher la heatmap
        st.pyplot(fig)
        
        # Analyse de la possession
        st.markdown("""
        <div class='card'>
            <h3>Analyse de la possession</h3>
            <p>Cette visualisation montre les zones du terrain o√π l'√©quipe a eu le plus de possession du ballon. Les zones en rouge indiquent une forte concentration de possession, tandis que les zones en jaune indiquent une concentration plus faible.</p>
            <p>L'analyse de la possession peut aider √† :</p>
            <ul>
                <li>Identifier les zones de contr√¥le pr√©f√©rentielles de l'√©quipe</li>
                <li>Comprendre la strat√©gie de construction du jeu</li>
                <li>D√©tecter les d√©s√©quilibres dans la r√©partition de la possession</li>
                <li>√âvaluer l'efficacit√© de la pression adverse</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        # M√©triques avanc√©es de possession
        st.subheader("M√©triques avanc√©es de possession")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown(f"""
            <div class='metric-container'>
                <div class='metric-value'>{np.random.randint(5, 15)}</div>
                <div class='metric-label'>S√©quences de 10+ passes</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class='metric-container'>
                <div class='metric-value'>{np.random.randint(20, 40)}</div>
                <div class='metric-label'>Entr√©es dans le dernier tiers</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown(f"""
            <div class='metric-container'>
                <div class='metric-value'>{np.random.randint(3, 8)}</div>
                <div class='metric-label'>Temps moyen de possession (sec)</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            st.markdown(f"""
            <div class='metric-container'>
                <div class='metric-value'>{np.random.randint(40, 70)}%</div>
                <div class='metric-label'>Possession dans le camp adverse</div>
            </div>
            """, unsafe_allow_html=True)
    
    # Onglet 2: Analyse des Passes
    with tab2:
        st.markdown("<h2 class='sub-header'>Analyse des Passes</h2>", unsafe_allow_html=True)
        
        # Statistiques de passes
        st.subheader("Statistiques de passes")
        
        # G√©n√©rer des donn√©es fictives pour les passes
        home_passes = np.random.randint(400, 700)
        away_passes = np.random.randint(400, 700)
        home_accuracy = np.random.randint(75, 90)
        away_accuracy = np.random.randint(75, 90)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"""
            <div class='card'>
                <h3>{selected_match_home}</h3>
                <p><strong>Passes totales:</strong> {home_passes}</p>
                <p><strong>Pr√©cision des passes:</strong> {home_accuracy}%</p>
                <p><strong>Passes r√©ussies:</strong> {int(home_passes * home_accuracy / 100)}</p>
                <p><strong>Passes manqu√©es:</strong> {int(home_passes * (100 - home_accuracy) / 100)}</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class='card'>
                <h3>{selected_match_away}</h3>
                <p><strong>Passes totales:</strong> {away_passes}</p>
                <p><strong>Pr√©cision des passes:</strong> {away_accuracy}%</p>
                <p><strong>Passes r√©ussies:</strong> {int(away_passes * away_accuracy / 100)}</p>
                <p><strong>Passes manqu√©es:</strong> {int(away_passes * (100 - away_accuracy) / 100)}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # R√©seau de passes
        st.subheader("R√©seau de passes")
        
        # Cr√©er un terrain de football pour le r√©seau de passes
        pitch_length = 120
        pitch_width = 80
        
        fig, ax = plt.subplots(figsize=(12, 8))
        
        # Dessiner le terrain
        # Rectangle principal
        ax.plot([0, 0, pitch_length, pitch_length, 0], [0, pitch_width, pitch_width, 0, 0], color='black')
        
        # Ligne m√©diane
        ax.plot([pitch_length/2, pitch_length/2], [0, pitch_width], color='black')
        
        # Cercle central
        central_circle = plt.Circle((pitch_length/2, pitch_width/2), 9.15, fill=False, color='black')
        ax.add_artist(central_circle)
        
        # Surfaces de r√©paration
        # Gauche
        ax.plot([0, 16.5, 16.5, 0], [pitch_width/2 - 20.15, pitch_width/2 - 20.15, pitch_width/2 + 20.15, pitch_width/2 + 20.15], color='black')
        # Droite
        ax.plot([pitch_length, pitch_length - 16.5, pitch_length - 16.5, pitch_length], [pitch_width/2 - 20.15, pitch_width/2 - 20.15, pitch_width/2 + 20.15, pitch_width/2 + 20.15], color='black')
        
        # Surfaces de but
        # Gauche
        ax.plot([0, 5.5, 5.5, 0], [pitch_width/2 - 9.16, pitch_width/2 - 9.16, pitch_width/2 + 9.16, pitch_width/2 + 9.16], color='black')
        # Droite
        ax.plot([pitch_length, pitch_length - 5.5, pitch_length - 5.5, pitch_length], [pitch_width/2 - 9.16, pitch_width/2 - 9.16, pitch_width/2 + 9.16, pitch_width/2 + 9.16], color='black')
        
        # Points de penalty
        ax.plot(11, pitch_width/2, marker='o', markersize=2, color='black')
        ax.plot(pitch_length - 11, pitch_width/2, marker='o', markersize=2, color='black')
        
        # Simuler des positions de joueurs
        # Formation 4-3-3
        player_positions = [
            (10, pitch_width/2),  # GK
            (30, pitch_width/5),  # RB
            (30, 2*pitch_width/5),  # CB
            (30, 3*pitch_width/5),  # CB
            (30, 4*pitch_width/5),  # LB
            (60, pitch_width/4),  # CM
            (60, pitch_width/2),  # CM
            (60, 3*pitch_width/4),  # CM
            (90, pitch_width/4),  # RW
            (90, pitch_width/2),  # ST
            (90, 3*pitch_width/4)  # LW
        ]
        
        # Dessiner les joueurs
        for i, (x, y) in enumerate(player_positions):
            circle = plt.Circle((x, y), 3, color='blue', fill=True)
            ax.add_artist(circle)
            ax.text(x, y - 5, str(i+1), fontsize=8, ha='center')
        
        # Simuler des passes entre les joueurs
        n_passes = 30
        for _ in range(n_passes):
            # S√©lectionner deux joueurs al√©atoires
            player1_idx = np.random.randint(0, len(player_positions))
            player2_idx = np.random.randint(0, len(player_positions))
            
            # √âviter les passes vers soi-m√™me
            while player1_idx == player2_idx:
                player2_idx = np.random.randint(0, len(player_positions))
            
            # R√©cup√©rer les positions des joueurs
            x1, y1 = player_positions[player1_idx]
            x2, y2 = player_positions[player2_idx]
            
            # Dessiner la fl√®che de passe
            # L'√©paisseur de la fl√®che est proportionnelle au nombre de passes
            width = np.random.uniform(0.5, 2.5)
            ax.arrow(x1, y1, x2-x1, y2-y1, head_width=2, head_length=2, fc='blue', ec='blue', alpha=0.4, width=width)
        
        ax.set_xlim(-5, pitch_length + 5)
        ax.set_ylim(-5, pitch_width + 5)
        ax.set_title(f"R√©seau de passes - {selected_team}")
        ax.set_xlabel("Longueur du terrain (m)")
        ax.set_ylabel("Largeur du terrain (m)")
        ax.set_aspect('equal')
        
        # Afficher le r√©seau de passes
        st.pyplot(fig)
        
        # Analyse du r√©seau de passes
        st.markdown("""
        <div class='card'>
            <h3>Analyse du r√©seau de passes</h3>
            <p>Cette visualisation montre les connexions de passes entre les joueurs. L'√©paisseur des fl√®ches est proportionnelle au nombre de passes √©chang√©es entre les joueurs.</p>
            <p>L'analyse du r√©seau de passes peut aider √† :</p>
            <ul>
                <li>Identifier les joueurs centraux dans la construction du jeu</li>
                <li>D√©tecter les combinaisons de passes pr√©f√©rentielles</li>
                <li>Comprendre la structure de l'√©quipe en possession</li>
                <li>Rep√©rer les d√©s√©quilibres dans la distribution des passes</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        # Types de passes
        st.subheader("Types de passes")
        
        # G√©n√©rer des donn√©es fictives pour les types de passes
        pass_types = ["Courtes", "Moyennes", "Longues", "Progressives", "Lat√©rales", "Vers l'arri√®re", "Derni√®re passe"]
        pass_counts = [np.random.randint(100, 300), np.random.randint(50, 150), np.random.randint(20, 60), 
                      np.random.randint(30, 80), np.random.randint(50, 150), np.random.randint(30, 100), np.random.randint(5, 20)]
        
        pass_data = pd.DataFrame({
            'Type de passe': pass_types,
            'Nombre': pass_counts
        })
        
        fig = px.bar(
            pass_data,
            x='Type de passe',
            y='Nombre',
            title=f"Distribution des types de passes - {selected_team}"
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Carte de chaleur des passes
        st.subheader("Carte de chaleur des passes")
        
        # Cr√©er un terrain de football pour la heatmap des passes
        pitch_length = 120
        pitch_width = 80
        
        fig, ax = plt.subplots(figsize=(12, 8))
        
        # Dessiner le terrain
        # Rectangle principal
        ax.plot([0, 0, pitch_length, pitch_length, 0], [0, pitch_width, pitch_width, 0, 0], color='black')
        
        # Ligne m√©diane
        ax.plot([pitch_length/2, pitch_length/2], [0, pitch_width], color='black')
        
        # Cercle central
        central_circle = plt.Circle((pitch_length/2, pitch_width/2), 9.15, fill=False, color='black')
        ax.add_artist(central_circle)
        
        # Surfaces de r√©paration
        # Gauche
        ax.plot([0, 16.5, 16.5, 0], [pitch_width/2 - 20.15, pitch_width/2 - 20.15, pitch_width/2 + 20.15, pitch_width/2 + 20.15], color='black')
        # Droite
        ax.plot([pitch_length, pitch_length - 16.5, pitch_length - 16.5, pitch_length], [pitch_width/2 - 20.15, pitch_width/2 - 20.15, pitch_width/2 + 20.15, pitch_width/2 + 20.15], color='black')
        
        # Surfaces de but
        # Gauche
        ax.plot([0, 5.5, 5.5, 0], [pitch_width/2 - 9.16, pitch_width/2 - 9.16, pitch_width/2 + 9.16, pitch_width/2 + 9.16], color='black')
        # Droite
        ax.plot([pitch_length, pitch_length - 5.5, pitch_length - 5.5, pitch_length], [pitch_width/2 - 9.16, pitch_width/2 - 9.16, pitch_width/2 + 9.16, pitch_width/2 + 9.16], color='black')
        
        # Points de penalty
        ax.plot(11, pitch_width/2, marker='o', markersize=2, color='black')
        ax.plot(pitch_length - 11, pitch_width/2, marker='o', markersize=2, color='black')
        
        # G√©n√©rer des donn√©es fictives pour la heatmap des passes
        # Simuler des points de d√©part de passes
        x_start = np.concatenate([
            np.random.normal(pitch_length/4, pitch_length/8, 200),  # D√©fense
            np.random.normal(pitch_length/2, pitch_length/6, 400),  # Milieu
            np.random.normal(3*pitch_length/4, pitch_length/8, 100)  # Attaque
        ])
        
        y_start = np.random.normal(pitch_width/2, pitch_width/3, len(x_start))
        
        # Cr√©er la heatmap
        heatmap = ax.hexbin(x_start, y_start, gridsize=30, cmap='YlOrRd', alpha=0.7)
        plt.colorbar(heatmap, ax=ax, label='Densit√© de passes')
        
        ax.set_xlim(-5, pitch_length + 5)
        ax.set_ylim(-5, pitch_width + 5)
        ax.set_title(f"Heatmap des passes - {selected_team}")
        ax.set_xlabel("Longueur du terrain (m)")
        ax.set_ylabel("Largeur du terrain (m)")
        ax.set_aspect('equal')
        
        # Afficher la heatmap
        st.pyplot(fig)
        
        # M√©triques avanc√©es de passes
        st.subheader("M√©triques avanc√©es de passes")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown(f"""
            <div class='metric-container'>
                <div class='metric-value'>{np.random.randint(10, 30)}</div>
                <div class='metric-label'>Passes cl√©s</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class='metric-container'>
                <div class='metric-value'>{np.random.randint(5, 15)}</div>
                <div class='metric-label'>Passes dans la surface</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown(f"""
            <div class='metric-container'>
                <div class='metric-value'>{np.random.randint(20, 50)}</div>
                <div class='metric-label'>Passes progressives</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            st.markdown(f"""
            <div class='metric-container'>
                <div class='metric-value'>{np.random.randint(3, 10)}</div>
                <div class='metric-label'>Passes d√©cisives attendues (xA)</div>
            </div>
            """, unsafe_allow_html=True)
    
    # Onglet 3: Analyse D√©fensive
    with tab3:
        st.markdown("<h2 class='sub-header'>Analyse D√©fensive</h2>", unsafe_allow_html=True)
        
        # Statistiques d√©fensives
        st.subheader("Statistiques d√©fensives")
        
        # G√©n√©rer des donn√©es fictives pour les statistiques d√©fensives
        defensive_stats = {
            'Tacles': np.random.randint(15, 30),
            'Interceptions': np.random.randint(10, 25),
            'Duels gagn√©s': np.random.randint(40, 70),
            'Duels a√©riens gagn√©s': np.random.randint(15, 30),
            'D√©gagements': np.random.randint(15, 35),
            'Blocs': np.random.randint(5, 15),
            'Fautes commises': np.random.randint(8, 18)
        }
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"""
            <div class='card'>
                <h3>Statistiques d√©fensives</h3>
                <p><strong>Tacles:</strong> {defensive_stats['Tacles']}</p>
                <p><strong>Interceptions:</strong> {defensive_stats['Interceptions']}</p>
                <p><strong>Duels gagn√©s:</strong> {defensive_stats['Duels gagn√©s']}</p>
                <p><strong>Duels a√©riens gagn√©s:</strong> {defensive_stats['Duels a√©riens gagn√©s']}</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class='card'>
                <h3>Statistiques d√©fensives (suite)</h3>
                <p><strong>D√©gagements:</strong> {defensive_stats['D√©gagements']}</p>
                <p><strong>Blocs:</strong> {defensive_stats['Blocs']}</p>
                <p><strong>Fautes commises:</strong> {defensive_stats['Fautes commises']}</p>
                <p><strong>Taux de r√©ussite des tacles:</strong> {np.random.randint(60, 85)}%</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Carte de chaleur des actions d√©fensives
        st.subheader("Carte de chaleur des actions d√©fensives")
        
        # Cr√©er un terrain de football pour la heatmap des actions d√©fensives
        pitch_length = 120
        pitch_width = 80
        
        fig, ax = plt.subplots(figsize=(12, 8))
        
        # Dessiner le terrain
        # Rectangle principal
        ax.plot([0, 0, pitch_length, pitch_length, 0], [0, pitch_width, pitch_width, 0, 0], color='black')
        
        # Ligne m√©diane
        ax.plot([pitch_length/2, pitch_length/2], [0, pitch_width], color='black')
        
        # Cercle central
        central_circle = plt.Circle((pitch_length/2, pitch_width/2), 9.15, fill=False, color='black')
        ax.add_artist(central_circle)
        
        # Surfaces de r√©paration
        # Gauche
        ax.plot([0, 16.5, 16.5, 0], [pitch_width/2 - 20.15, pitch_width/2 - 20.15, pitch_width/2 + 20.15, pitch_width/2 + 20.15], color='black')
        # Droite
        ax.plot([pitch_length, pitch_length - 16.5, pitch_length - 16.5, pitch_length], [pitch_width/2 - 20.15, pitch_width/2 - 20.15, pitch_width/2 + 20.15, pitch_width/2 + 20.15], color='black')
        
        # Surfaces de but
        # Gauche
        ax.plot([0, 5.5, 5.5, 0], [pitch_width/2 - 9.16, pitch_width/2 - 9.16, pitch_width/2 + 9.16, pitch_width/2 + 9.16], color='black')
        # Droite
        ax.plot([pitch_length, pitch_length - 5.5, pitch_length - 5.5, pitch_length], [pitch_width/2 - 9.16, pitch_width/2 - 9.16, pitch_width/2 + 9.16, pitch_width/2 + 9.16], color='black')
        
        # Points de penalty
        ax.plot(11, pitch_width/2, marker='o', markersize=2, color='black')
        ax.plot(pitch_length - 11, pitch_width/2, marker='o', markersize=2, color='black')
        
        # G√©n√©rer des donn√©es fictives pour la heatmap des actions d√©fensives
        # Simuler des points d'actions d√©fensives
        x_def = np.concatenate([
            np.random.normal(pitch_length/4, pitch_length/6, 300),  # D√©fense
            np.random.normal(pitch_length/2, pitch_length/8, 150),  # Milieu
            np.random.normal(3*pitch_length/4, pitch_length/10, 50)  # Attaque
        ])
        
        y_def = np.random.normal(pitch_width/2, pitch_width/3, len(x_def))
        
        # Cr√©er la heatmap
        heatmap = ax.hexbin(x_def, y_def, gridsize=30, cmap='Blues', alpha=0.7)
        plt.colorbar(heatmap, ax=ax, label='Densit√© d\'actions d√©fensives')
        
        ax.set_xlim(-5, pitch_length + 5)
        ax.set_ylim(-5, pitch_width + 5)
        ax.set_title(f"Heatmap des actions d√©fensives - {selected_team}")
        ax.set_xlabel("Longueur du terrain (m)")
        ax.set_ylabel("Largeur du terrain (m)")
        ax.set_aspect('equal')
        
        # Afficher la heatmap
        st.pyplot(fig)
        
        # Analyse de la pression
        st.subheader("Analyse de la pression")
        
        # Cr√©er un terrain de football pour l'analyse de la pression
        pitch_length = 120
        pitch_width = 80
        
        fig, ax = plt.subplots(figsize=(12, 8))
        
        # Dessiner le terrain
        # Rectangle principal
        ax.plot([0, 0, pitch_length, pitch_length, 0], [0, pitch_width, pitch_width, 0, 0], color='black')
        
        # Ligne m√©diane
        ax.plot([pitch_length/2, pitch_length/2], [0, pitch_width], color='black')
        
        # Cercle central
        central_circle = plt.Circle((pitch_length/2, pitch_width/2), 9.15, fill=False, color='black')
        ax.add_artist(central_circle)
        
        # Surfaces de r√©paration
        # Gauche
        ax.plot([0, 16.5, 16.5, 0], [pitch_width/2 - 20.15, pitch_width/2 - 20.15, pitch_width/2 + 20.15, pitch_width/2 + 20.15], color='black')
        # Droite
        ax.plot([pitch_length, pitch_length - 16.5, pitch_length - 16.5, pitch_length], [pitch_width/2 - 20.15, pitch_width/2 - 20.15, pitch_width/2 + 20.15, pitch_width/2 + 20.15], color='black')
        
        # Surfaces de but
        # Gauche
        ax.plot([0, 5.5, 5.5, 0], [pitch_width/2 - 9.16, pitch_width/2 - 9.16, pitch_width/2 + 9.16, pitch_width/2 + 9.16], color='black')
        # Droite
        ax.plot([pitch_length, pitch_length - 5.5, pitch_length - 5.5, pitch_length], [pitch_width/2 - 9.16, pitch_width/2 - 9.16, pitch_width/2 + 9.16, pitch_width/2 + 9.16], color='black')
        
        # Points de penalty
        ax.plot(11, pitch_width/2, marker='o', markersize=2, color='black')
        ax.plot(pitch_length - 11, pitch_width/2, marker='o', markersize=2, color='black')
        
        # Dessiner les zones de pression
        # Zone de pression haute
        high_press = patches.Rectangle((pitch_length/2, 0), pitch_length/2, pitch_width, 
                                      linewidth=0, edgecolor='none', facecolor='red', alpha=0.2)
        ax.add_patch(high_press)
        
        # Zone de pression moyenne
        mid_press = patches.Rectangle((pitch_length/4, 0), pitch_length/4, pitch_width, 
                                     linewidth=0, edgecolor='none', facecolor='yellow', alpha=0.2)
        ax.add_patch(mid_press)
        
        # Zone de pression basse
        low_press = patches.Rectangle((0, 0), pitch_length/4, pitch_width, 
                                     linewidth=0, edgecolor='none', facecolor='green', alpha=0.2)
        ax.add_patch(low_press)
        
        # Ajouter des annotations
        ax.text(3*pitch_length/4, pitch_width/2, "Pression haute", fontsize=12, ha='center')
        ax.text(3*pitch_length/8, pitch_width/2, "Pression moyenne", fontsize=12, ha='center')
        ax.text(pitch_length/8, pitch_width/2, "Pression basse", fontsize=12, ha='center')
        
        # G√©n√©rer des donn√©es fictives pour les r√©cup√©rations
        n_recoveries = 50
        x_rec = np.concatenate([
            np.random.normal(3*pitch_length/4, pitch_length/10, int(n_recoveries*0.3)),  # Pression haute
            np.random.normal(3*pitch_length/8, pitch_length/10, int(n_recoveries*0.5)),  # Pression moyenne
            np.random.normal(pitch_length/8, pitch_length/10, int(n_recoveries*0.2))     # Pression basse
        ])
        
        y_rec = np.random.uniform(5, pitch_width-5, len(x_rec))
        
        # Dessiner les points de r√©cup√©ration
        ax.scatter(x_rec, y_rec, color='blue', s=30, alpha=0.7, label='R√©cup√©rations')
        
        ax.set_xlim(-5, pitch_length + 5)
        ax.set_ylim(-5, pitch_width + 5)
        ax.set_title(f"Analyse de la pression - {selected_team}")
        ax.set_xlabel("Longueur du terrain (m)")
        ax.set_ylabel("Largeur du terrain (m)")
        ax.set_aspect('equal')
        ax.legend(loc='upper left')
        
        # Afficher l'analyse de la pression
        st.pyplot(fig)
        
        # M√©triques de pression
        st.subheader("M√©triques de pression")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown(f"""
            <div class='metric-container'>
                <div class='metric-value'>{np.random.randint(10, 25)}</div>
                <div class='metric-label'>R√©cup√©rations en zone haute</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class='metric-container'>
                <div class='metric-value'>{np.random.randint(15, 30)}</div>
                <div class='metric-label'>R√©cup√©rations en zone moyenne</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown(f"""
            <div class='metric-container'>
                <div class='metric-value'>{np.random.randint(5, 15)}</div>
                <div class='metric-label'>R√©cup√©rations en zone basse</div>
            </div>
            """, unsafe_allow_html=True)
        
        # Analyse des r√©cup√©rations
        st.markdown("""
        <div class='card'>
            <h3>Analyse de la pression et des r√©cup√©rations</h3>
            <p>Cette visualisation montre les zones o√π l'√©quipe exerce sa pression et r√©cup√®re le ballon. Les zones sont divis√©es en trois cat√©gories :</p>
            <ul>
                <li><strong>Pression haute (rouge):</strong> R√©cup√©rations dans le tiers offensif, indiquant un pressing agressif</li>
                <li><strong>Pression moyenne (jaune):</strong> R√©cup√©rations dans le tiers m√©dian, indiquant un bloc m√©dian</li>
                <li><strong>Pression basse (verte):</strong> R√©cup√©rations dans le tiers d√©fensif, indiquant un bloc bas</li>
            </ul>
            <p>L'analyse de la pression peut aider √† :</p>
            <ul>
                <li>Comprendre la strat√©gie d√©fensive de l'√©quipe</li>
                <li>Identifier les zones de r√©cup√©ration pr√©f√©rentielles</li>
                <li>√âvaluer l'efficacit√© du pressing</li>
                <li>Adapter la strat√©gie offensive contre ce type de d√©fense</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    # Onglet 4: Analyse des Transitions
    with tab4:
        st.markdown("<h2 class='sub-header'>Analyse des Transitions</h2>", unsafe_allow_html=True)
        
        # Statistiques de transition
        st.subheader("Statistiques de transition")
        
        # G√©n√©rer des donn√©es fictives pour les transitions
        transition_stats = {
            'Contre-attaques': np.random.randint(5, 15),
            'Buts sur contre-attaque': np.random.randint(0, 3),
            'Temps moyen de transition (sec)': round(np.random.uniform(6, 12), 1),
            'Transitions r√©ussies (%)': np.random.randint(40, 70),
            'R√©cup√©rations suivies de tir': np.random.randint(3, 10),
            'Distance moyenne de progression (m)': np.random.randint(25, 45)
        }
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"""
            <div class='card'>
                <h3>Transitions offensives</h3>
                <p><strong>Contre-attaques:</strong> {transition_stats['Contre-attaques']}</p>
                <p><strong>Buts sur contre-attaque:</strong> {transition_stats['Buts sur contre-attaque']}</p>
                <p><strong>Temps moyen de transition:</strong> {transition_stats['Temps moyen de transition (sec)']} sec</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class='card'>
                <h3>Efficacit√© des transitions</h3>
                <p><strong>Transitions r√©ussies:</strong> {transition_stats['Transitions r√©ussies (%)']}%</p>
                <p><strong>R√©cup√©rations suivies de tir:</strong> {transition_stats['R√©cup√©rations suivies de tir']}</p>
                <p><strong>Distance moyenne de progression:</strong> {transition_stats['Distance moyenne de progression (m)']} m</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Visualisation des transitions
        st.subheader("Visualisation des transitions")
        
        # Cr√©er un terrain de football pour les transitions
        pitch_length = 120
        pitch_width = 80
        
        fig, ax = plt.subplots(figsize=(12, 8))
        
        # Dessiner le terrain
        # Rectangle principal
        ax.plot([0, 0, pitch_length, pitch_length, 0], [0, pitch_width, pitch_width, 0, 0], color='black')
        
        # Ligne m√©diane
        ax.plot([pitch_length/2, pitch_length/2], [0, pitch_width], color='black')
        
        # Cercle central
        central_circle = plt.Circle((pitch_length/2, pitch_width/2), 9.15, fill=False, color='black')
        ax.add_artist(central_circle)
        
        # Surfaces de r√©paration
        # Gauche
        ax.plot([0, 16.5, 16.5, 0], [pitch_width/2 - 20.15, pitch_width/2 - 20.15, pitch_width/2 + 20.15, pitch_width/2 + 20.15], color='black')
        # Droite
        ax.plot([pitch_length, pitch_length - 16.5, pitch_length - 16.5, pitch_length], [pitch_width/2 - 20.15, pitch_width/2 - 20.15, pitch_width/2 + 20.15, pitch_width/2 + 20.15], color='black')
        
        # Surfaces de but
        # Gauche
        ax.plot([0, 5.5, 5.5, 0], [pitch_width/2 - 9.16, pitch_width/2 - 9.16, pitch_width/2 + 9.16, pitch_width/2 + 9.16], color='black')
        # Droite
        ax.plot([pitch_length, pitch_length - 5.5, pitch_length - 5.5, pitch_length], [pitch_width/2 - 9.16, pitch_width/2 - 9.16, pitch_width/2 + 9.16, pitch_width/2 + 9.16], color='black')
        
        # Points de penalty
        ax.plot(11, pitch_width/2, marker='o', markersize=2, color='black')
        ax.plot(pitch_length - 11, pitch_width/2, marker='o', markersize=2, color='black')
        
        # Simuler des transitions
        n_transitions = 10
        
        # Points de d√©part des transitions (r√©cup√©rations)
        start_x = np.concatenate([
            np.random.normal(pitch_length/4, pitch_length/10, int(n_transitions*0.6)),  # D√©fense
            np.random.normal(pitch_length/2, pitch_length/10, int(n_transitions*0.4))   # Milieu
        ])
        
        start_y = np.random.uniform(10, pitch_width-10, len(start_x))
        
        # Points d'arriv√©e des transitions (finalisations)
        end_x = np.random.normal(pitch_length - 20, 10, len(start_x))
        end_y = np.random.normal(pitch_width/2, pitch_width/4, len(start_x))
        
        # Dessiner les transitions
        for i in range(len(start_x)):
            # Point de d√©part (r√©cup√©ration)
            ax.plot(start_x[i], start_y[i], 'bo', markersize=8)
            
            # Point d'arriv√©e (finalisation)
            ax.plot(end_x[i], end_y[i], 'ro', markersize=8)
            
            # Fl√®che de transition
            ax.arrow(start_x[i], start_y[i], 
                    (end_x[i] - start_x[i])*0.9, (end_y[i] - start_y[i])*0.9,  # R√©duire l√©g√®rement pour √©viter de superposer le point d'arriv√©e
                    head_width=2, head_length=2, fc='green', ec='green', alpha=0.6)
        
        ax.set_xlim(-5, pitch_length + 5)
        ax.set_ylim(-5, pitch_width + 5)
        ax.set_title(f"Transitions d√©fense-attaque - {selected_team}")
        ax.set_xlabel("Longueur du terrain (m)")
        ax.set_ylabel("Largeur du terrain (m)")
        ax.set_aspect('equal')
        
        # Ajouter une l√©gende
        ax.plot([], [], 'bo', markersize=8, label='Point de r√©cup√©ration')
        ax.plot([], [], 'ro', markersize=8, label='Point de finalisation')
        ax.plot([], [], '-', color='green', alpha=0.6, label='Trajectoire de transition')
        ax.legend(loc='upper left')
        
        # Afficher les transitions
        st.pyplot(fig)
        
        # Analyse des transitions
        st.markdown("""
        <div class='card'>
            <h3>Analyse des transitions</h3>
            <p>Cette visualisation montre les transitions d√©fense-attaque de l'√©quipe, depuis le point de r√©cup√©ration du ballon jusqu'au point de finalisation.</p>
            <p>L'analyse des transitions peut aider √† :</p>
            <ul>
                <li>Comprendre la vitesse et l'efficacit√© des contre-attaques</li>
                <li>Identifier les zones de r√©cup√©ration les plus dangereuses</li>
                <li>Analyser les circuits pr√©f√©rentiels en transition</li>
                <li>√âvaluer la capacit√© de l'√©quipe √† passer rapidement de la d√©fense √† l'attaque</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        # Vitesse des transitions
        st.subheader("Vitesse des transitions")
        
        # G√©n√©rer des donn√©es fictives pour la vitesse des transitions
        transition_times = np.random.normal(8, 2, 20)
        transition_times = np.clip(transition_times, 4, 15)
        
        fig = px.histogram(
            transition_times,
            nbins=10,
            labels={'value': 'Temps de transition (sec)'},
            title="Distribution des temps de transition"
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Analyse des temps de transition
        st.markdown("""
        <div class='card'>
            <h3>Analyse des temps de transition</h3>
            <p>Ce graphique montre la distribution des temps de transition, c'est-√†-dire le temps √©coul√© entre la r√©cup√©ration du ballon et la finalisation de l'action.</p>
            <p>Un temps de transition court indique une √©quipe capable de contre-attaquer rapidement, tandis qu'un temps plus long peut indiquer une approche plus contr√¥l√©e ou des difficult√©s √† progresser rapidement.</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Recommandations tactiques
        st.subheader("Recommandations tactiques")
        
        st.markdown("""
        <div class='card'>
            <h3>Recommandations tactiques bas√©es sur l'analyse</h3>
            <p>En fonction de l'analyse des transitions et des autres aspects tactiques, voici quelques recommandations :</p>
            <ol>
                <li><strong>Optimiser la pression :</strong> Concentrer la pression dans les zones o√π l'√©quipe r√©cup√®re le plus efficacement le ballon.</li>
                <li><strong>Am√©liorer les transitions :</strong> Travailler sur la vitesse et la pr√©cision des transitions pour augmenter leur efficacit√©.</li>
                <li><strong>Exploiter les circuits pr√©f√©rentiels :</strong> Renforcer les connexions entre les joueurs cl√©s dans le r√©seau de passes.</li>
                <li><strong>√âquilibrer la possession :</strong> Maintenir un √©quilibre entre la possession s√©curis√©e et les attaques rapides.</li>
                <li><strong>Adapter la strat√©gie d√©fensive :</strong> Ajuster la hauteur du bloc d√©fensif en fonction de l'adversaire et du contexte du match.</li>
            </ol>
        </div>
        """, unsafe_allow_html=True)

except Exception as e:
    st.error(f"Une erreur s'est produite: {e}")
    st.info("Assurez-vous d'avoir acc√®s aux donn√©es StatsBomb et que les API sont correctement configur√©es.")
