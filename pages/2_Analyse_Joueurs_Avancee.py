import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from statsbombpy import sb
import sys
import os

# Ajouter le r√©pertoire parent au chemin pour importer les fonctions utilitaires
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from utils.data_loader import (
    load_competitions, load_matches, load_teams, load_players, 
    load_events, load_filtered_events, calculate_player_stats
)

# Configuration de la page
st.set_page_config(
    page_title="Analyse de Joueurs Avanc√©e",
    page_icon="üë§",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Styles CSS personnalis√©s
st.markdown("""
<style>
    .main-header {
        font-size: 2rem;
        color: #1E88E5;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.5rem;
        color: #424242;
        margin-bottom: 1rem;
    }
    .card {
        background-color: #f9f9f9;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }
    .metric-container {
        background-color: #e3f2fd;
        border-radius: 5px;
        padding: 10px;
        text-align: center;
        margin-bottom: 10px;
    }
    .metric-value {
        font-size: 1.8rem;
        font-weight: bold;
        color: #1976D2;
    }
    .metric-label {
        font-size: 0.9rem;
        color: #424242;
    }
    .positive-trend {
        color: #4CAF50;
    }
    .negative-trend {
        color: #F44336;
    }
</style>
""", unsafe_allow_html=True)

# Titre de la page
st.markdown("<h1 class='main-header'>üë§ Analyse de Joueurs Avanc√©e</h1>", unsafe_allow_html=True)

# Barre lat√©rale pour les filtres
st.sidebar.header("Filtres")

# Chargement des comp√©titions
try:
    competitions = load_competitions()
    
    # S√©lection de la comp√©tition
    competition_options = competitions[['competition_id', 'competition_name', 'season_id', 'season_name']].drop_duplicates()
    competition_options['display_name'] = competition_options['competition_name'] + ' - ' + competition_options['season_name']
    
    selected_competition = st.sidebar.selectbox(
        "S√©lectionner une comp√©tition",
        options=competition_options['display_name'].tolist(),
        index=0
    )
    
    # R√©cup√©rer les IDs de la comp√©tition et de la saison s√©lectionn√©es
    selected_comp_data = competition_options[competition_options['display_name'] == selected_competition]
    competition_id = selected_comp_data['competition_id'].values[0]
    season_id = selected_comp_data['season_id'].values[0]
    
    # Chargement des √©quipes
    teams = load_teams(competition_id, season_id)
    
    # S√©lection de l'√©quipe
    selected_team = st.sidebar.selectbox(
        "S√©lectionner une √©quipe",
        options=teams,
        index=0
    )
    
    # Chargement des joueurs de l'√©quipe s√©lectionn√©e
    players = load_players(selected_team, competition_id, season_id)
    
    if not players.empty:
        # S√©lection du joueur
        player_options = players['player_name'].tolist() if 'player_name' in players.columns else []
        
        selected_player1 = st.sidebar.selectbox(
            "S√©lectionner un joueur",
            options=player_options,
            index=0 if player_options else None
        )
        
        selected_player2 = st.sidebar.selectbox(
            "S√©lectionner un joueur pour comparaison",
            options=['Aucun'] + player_options,
            index=0
        )
        
        # Options d'analyse avanc√©e
        st.sidebar.header("Options d'analyse avanc√©e")
        
        analysis_period = st.sidebar.radio(
            "P√©riode d'analyse",
            options=["Saison compl√®te", "5 derniers matchs", "10 derniers matchs"],
            index=0
        )
        
        normalize_stats = st.sidebar.checkbox("Normaliser par 90 minutes", value=True)
        
        show_percentiles = st.sidebar.checkbox("Afficher les percentiles", value=True)
        
        # Onglets pour les diff√©rentes analyses
        tab1, tab2, tab3, tab4 = st.tabs([
            "Profil du Joueur", 
            "Comparaison Avanc√©e",
            "√âvolution Temporelle",
            "Analyse Contextuelle"
        ])
        
        # Onglet 1: Profil du Joueur
        with tab1:
            st.markdown("<h2 class='sub-header'>Profil du Joueur</h2>", unsafe_allow_html=True)
            
            # Informations de base sur le joueur
            col1, col2 = st.columns([1, 2])
            
            with col1:
                # Image du joueur (fictive)
                st.image("https://via.placeholder.com/300x400?text=Photo+du+Joueur", caption=selected_player1)
                
                # Informations de base
                st.markdown(f"""
                <div class='card'>
                    <h3>Informations</h3>
                    <p><strong>√âquipe:</strong> {selected_team}</p>
                    <p><strong>Position:</strong> {'Attaquant' if np.random.random() < 0.3 else ('Milieu' if np.random.random() < 0.5 else 'D√©fenseur')}</p>
                    <p><strong>√Çge:</strong> {np.random.randint(18, 35)} ans</p>
                    <p><strong>Taille:</strong> {np.random.randint(170, 195)} cm</p>
                    <p><strong>Pied pr√©f√©r√©:</strong> {'Droit' if np.random.random() < 0.7 else 'Gauche'}</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                # Statistiques cl√©s
                st.markdown("<h3>Statistiques cl√©s</h3>", unsafe_allow_html=True)
                
                # Calculer ou simuler les statistiques du joueur
                player_stats = calculate_player_stats(selected_player1, selected_team, competition_id, season_id)
                
                # Afficher les m√©triques principales
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.markdown(f"""
                    <div class='metric-container'>
                        <div class='metric-value'>{player_stats.get('goals', 0)}</div>
                        <div class='metric-label'>Buts</div>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col2:
                    st.markdown(f"""
                    <div class='metric-container'>
                        <div class='metric-value'>{player_stats.get('assists', 0)}</div>
                        <div class='metric-label'>Passes d√©cisives</div>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col3:
                    st.markdown(f"""
                    <div class='metric-container'>
                        <div class='metric-value'>{player_stats.get('matches_played', 0)}</div>
                        <div class='metric-label'>Matchs jou√©s</div>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col4:
                    minutes = player_stats.get('minutes_played', 0)
                    st.markdown(f"""
                    <div class='metric-container'>
                        <div class='metric-value'>{minutes}</div>
                        <div class='metric-label'>Minutes jou√©es</div>
                    </div>
                    """, unsafe_allow_html=True)
                
                # Statistiques par 90 minutes
                if normalize_stats and minutes > 0:
                    st.markdown("<h4>Statistiques par 90 minutes</h4>", unsafe_allow_html=True)
                    
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        goals_per_90 = round(player_stats.get('goals', 0) * 90 / minutes, 2)
                        st.markdown(f"""
                        <div class='metric-container'>
                            <div class='metric-value'>{goals_per_90}</div>
                            <div class='metric-label'>Buts / 90 min</div>
                        </div>
                        """, unsafe_allow_html=True)
                    
                    with col2:
                        assists_per_90 = round(player_stats.get('assists', 0) * 90 / minutes, 2)
                        st.markdown(f"""
                        <div class='metric-container'>
                            <div class='metric-value'>{assists_per_90}</div>
                            <div class='metric-label'>Passes d√©c. / 90 min</div>
                        </div>
                        """, unsafe_allow_html=True)
                    
                    with col3:
                        shots_per_90 = round(player_stats.get('shots', 0) * 90 / minutes, 2)
                        st.markdown(f"""
                        <div class='metric-container'>
                            <div class='metric-value'>{shots_per_90}</div>
                            <div class='metric-label'>Tirs / 90 min</div>
                        </div>
                        """, unsafe_allow_html=True)
                    
                    with col4:
                        key_passes_per_90 = round(player_stats.get('key_passes', 0) * 90 / minutes, 2)
                        st.markdown(f"""
                        <div class='metric-container'>
                            <div class='metric-value'>{key_passes_per_90}</div>
                            <div class='metric-label'>Passes cl√©s / 90 min</div>
                        </div>
                        """, unsafe_allow_html=True)
                
                # Graphique radar des comp√©tences
                st.markdown("<h4>Profil de comp√©tences</h4>", unsafe_allow_html=True)
                
                # Cr√©er des donn√©es pour le graphique radar
                categories = ['Finition', 'Passes', 'Dribbles', 'D√©fense', 'Physique', 'Vitesse']
                
                # G√©n√©rer des valeurs al√©atoires pour l'exemple
                values = np.random.randint(60, 95, len(categories))
                
                # Cr√©er le graphique radar
                fig = go.Figure()
                
                fig.add_trace(go.Scatterpolar(
                    r=values,
                    theta=categories,
                    fill='toself',
                    name=selected_player1,
                    line=dict(color='#1E88E5')
                ))
                
                fig.update_layout(
                    polar=dict(
                        radialaxis=dict(
                            visible=True,
                            range=[0, 100]
                        )
                    ),
                    showlegend=False
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # Analyse des forces et faiblesses
                st.markdown("<h4>Forces et faiblesses</h4>", unsafe_allow_html=True)
                
                # Identifier les forces et faiblesses bas√©es sur les valeurs du radar
                strengths = [categories[i] for i in range(len(categories)) if values[i] >= 85]
                weaknesses = [categories[i] for i in range(len(categories)) if values[i] <= 70]
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("<h5>Forces</h5>", unsafe_allow_html=True)
                    if strengths:
                        for strength in strengths:
                            st.markdown(f"‚úÖ **{strength}**")
                    else:
                        st.markdown("Aucune force particuli√®re identifi√©e.")
                
                with col2:
                    st.markdown("<h5>Points √† am√©liorer</h5>", unsafe_allow_html=True)
                    if weaknesses:
                        for weakness in weaknesses:
                            st.markdown(f"‚ö†Ô∏è **{weakness}**")
                    else:
                        st.markdown("Aucune faiblesse particuli√®re identifi√©e.")
        
        # Onglet 2: Comparaison Avanc√©e
        with tab2:
            st.markdown("<h2 class='sub-header'>Comparaison Avanc√©e</h2>", unsafe_allow_html=True)
            
            # S√©lection du type de comparaison
            comparison_type = st.radio(
                "Type de comparaison",
                options=["Avec un autre joueur", "Avec la moyenne du poste", "Avec les meilleurs du poste"],
                horizontal=True
            )
            
            # S√©lection des m√©triques √† comparer
            metrics_options = [
                "Buts", "Passes d√©cisives", "Tirs", "Tirs cadr√©s", 
                "Passes", "Passes r√©ussies (%)", "Passes cl√©s", 
                "Dribbles r√©ussis", "Duels gagn√©s", "Interceptions", 
                "Tacles", "Fautes", "Distance parcourue"
            ]
            
            selected_metrics = st.multiselect(
                "S√©lectionner les m√©triques √† comparer",
                options=metrics_options,
                default=metrics_options[:6]
            )
            
            if selected_metrics:
                # Graphique radar pour comparer les joueurs
                st.subheader("Graphique Radar: Comparaison des performances")
                
                # Cr√©er des donn√©es pour le graphique radar
                player1_values = []
                player2_values = []
                
                for metric in selected_metrics:
                    # Simuler des valeurs pour le joueur 1
                    if metric == "Buts":
                        player1_values.append(player_stats.get('goals', np.random.randint(0, 15)))
                    elif metric == "Passes d√©cisives":
                        player1_values.append(player_stats.get('assists', np.random.randint(0, 10)))
                    elif metric == "Tirs":
                        player1_values.append(player_stats.get('shots', np.random.randint(10, 50)))
                    elif metric == "Passes r√©ussies (%)":
                        player1_values.append(player_stats.get('pass_accuracy', np.random.randint(70, 95)))
                    else:
                        player1_values.append(np.random.randint(10, 100))
                    
                    # Simuler des valeurs pour le joueur 2 ou la moyenne
                    if comparison_type == "Avec un autre joueur" and selected_player2 != 'Aucun':
                        player2_values.append(np.random.randint(10, 100))
                        comparison_name = selected_player2
                    elif comparison_type == "Avec les meilleurs du poste":
                        player2_values.append(np.random.randint(70, 100))
                        comparison_name = "Top 10% du poste"
                    else:
                        player2_values.append(np.random.randint(40, 80))
                        comparison_name = "Moyenne du poste"
                
                # Normaliser les valeurs pour le graphique radar
                max_values = [max(player1_values[i], player2_values[i]) for i in range(len(selected_metrics))]
                player1_values_norm = [player1_values[i]/max_values[i] if max_values[i] > 0 else 0 for i in range(len(selected_metrics))]
                player2_values_norm = [player2_values[i]/max_values[i] if max_values[i] > 0 else 0 for i in range(len(selected_metrics))]
                
                # Cr√©er le graphique radar
                fig = go.Figure()
                
                fig.add_trace(go.Scatterpolar(
                    r=player1_values_norm,
                    theta=selected_metrics,
                    fill='toself',
                    name=selected_player1,
                    line=dict(color='#1E88E5')
                ))
                
                fig.add_trace(go.Scatterpolar(
                    r=player2_values_norm,
                    theta=selected_metrics,
                    fill='toself',
                    name=comparison_name,
                    line=dict(color='#FFC107')
                ))
                
                fig.update_layout(
                    polar=dict(
                        radialaxis=dict(
                            visible=True,
                            range=[0, 1]
                        )
                    ),
                    showlegend=True
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # Tableau de comparaison d√©taill√©
                st.subheader("Tableau de comparaison d√©taill√©")
                
                comparison_data = {
                    'M√©trique': selected_metrics,
                    selected_player1: player1_values,
                    comparison_name: player2_values
                }
                
                if show_percentiles:
                    # Calculer les percentiles fictifs
                    percentiles = [np.random.randint(1, 100) for _ in range(len(selected_metrics))]
                    comparison_data['Percentile'] = percentiles
                
                comparison_df = pd.DataFrame(comparison_data)
                
                # Afficher le tableau
                st.dataframe(comparison_df, use_container_width=True)
                
                # Graphique √† barres pour comparer les valeurs absolues
                st.subheader("Comparaison des valeurs absolues")
                
                # Pr√©parer les donn√©es pour le graphique √† barres
                bar_data = pd.DataFrame({
                    'M√©trique': selected_metrics * 2,
                    'Joueur': [selected_player1] * len(selected_metrics) + [comparison_name] * len(selected_metrics),
                    'Valeur': player1_values + player2_values
                })
                
                # Cr√©er le graphique √† barres
                fig = px.bar(
                    bar_data,
                    x='M√©trique',
                    y='Valeur',
                    color='Joueur',
                    barmode='group',
                    title=f"Comparaison entre {selected_player1} et {comparison_name}"
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # Analyse des diff√©rences
                st.subheader("Analyse des diff√©rences")
                
                # Calculer les diff√©rences en pourcentage
                differences = []
                for i in range(len(selected_metrics)):
                    if player2_values[i] > 0:
                        diff_pct = round((player1_values[i] - player2_values[i]) / player2_values[i] * 100, 1)
                        differences.append((selected_metrics[i], diff_pct))
                
                # Trier les diff√©rences
                differences.sort(key=lambda x: x[1], reverse=True)
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("<h5>Points forts par rapport √† la r√©f√©rence</h5>", unsafe_allow_html=True)
                    strengths = [d for d in differences if d[1] > 10]
                    if strengths:
                        for metric, diff in strengths:
                            st.markdown(f"‚úÖ **{metric}**: +{diff}%")
                    else:
                        st.markdown("Aucun avantage significatif identifi√©.")
                
                with col2:
                    st.markdown("<h5>Points √† am√©liorer par rapport √† la r√©f√©rence</h5>", unsafe_allow_html=True)
                    weaknesses = [d for d in differences if d[1] < -10]
                    if weaknesses:
                        for metric, diff in weaknesses:
                            st.markdown(f"‚ö†Ô∏è **{metric}**: {diff}%")
                    else:
                        st.markdown("Aucune faiblesse significative identifi√©e.")
            else:
                st.warning("Veuillez s√©lectionner au moins une m√©trique pour la comparaison.")
        
        # Onglet 3: √âvolution Temporelle
        with tab3:
            st.markdown("<h2 class='sub-header'>√âvolution Temporelle</h2>", unsafe_allow_html=True)
            
            # S√©lection de la m√©trique √† suivre
            metric_to_track = st.selectbox(
                "S√©lectionner une m√©trique √† suivre",
                options=["Buts", "Passes d√©cisives", "Note globale", "Distance parcourue", "Passes r√©ussies", "xG", "xA"],
                index=0
            )
            
            # G√©n√©rer des donn√©es fictives pour la progression
            n_matches = 15
            match_dates = pd.date_range(start='2023-08-01', periods=n_matches, freq='W')
            
            if metric_to_track == "Buts":
                stat_values = np.random.choice([0, 0, 0, 0, 1, 1, 2], size=n_matches)
            elif metric_to_track == "Passes d√©cisives":
                stat_values = np.random.choice([0, 0, 0, 1, 1], size=n_matches)
            elif metric_to_track == "Note globale":
                stat_values = np.random.normal(7, 1, n_matches)
                stat_values = np.round(np.clip(stat_values, 4, 10), 1)
            elif metric_to_track == "Distance parcourue":
                stat_values = np.random.normal(9, 1, n_matches)
                stat_values = np.round(stat_values, 1)
            elif metric_to_track == "xG":
                stat_values = np.random.normal(0.3, 0.2, n_matches)
                stat_values = np.round(np.clip(stat_values, 0, 1), 2)
            elif metric_to_track == "xA":
                stat_values = np.random.normal(0.2, 0.15, n_matches)
                stat_values = np.round(np.clip(stat_values, 0, 0.8), 2)
            else:  # Passes r√©ussies
                stat_values = np.random.normal(40, 10, n_matches)
                stat_values = np.round(stat_values)
            
            # Cr√©er le dataframe pour le graphique en courbes
            progression_data = pd.DataFrame({
                'Date': match_dates,
                'Match': [f"Match {i+1}" for i in range(n_matches)],
                metric_to_track: stat_values
            })
            
            # Ajouter une colonne pour la moyenne mobile
            progression_data['Moyenne mobile (3 matchs)'] = progression_data[metric_to_track].rolling(window=3, min_periods=1).mean()
            
            # Cr√©er le graphique en courbes
            fig = px.line(
                progression_data,
                x='Date',
                y=[metric_to_track, 'Moyenne mobile (3 matchs)'],
                markers=True,
                title=f"√âvolution de {metric_to_track} pour {selected_player1}"
            )
            
            # Ajouter des annotations pour les √©v√©nements importants
            if metric_to_track == "Buts" or metric_to_track == "Passes d√©cisives":
                # Trouver les matchs avec des valeurs √©lev√©es
                important_matches = progression_data[progression_data[metric_to_track] > 0]
                
                for _, match in important_matches.iterrows():
                    fig.add_annotation(
                        x=match['Date'],
                        y=match[metric_to_track],
                        text=f"{match[metric_to_track]} {metric_to_track.lower()}",
                        showarrow=True,
                        arrowhead=1,
                        ax=0,
                        ay=-30
                    )
            
            # Afficher le graphique
            st.plotly_chart(fig, use_container_width=True)
            
            # Analyse de tendance
            st.subheader("Analyse de tendance")
            
            # Calculer la tendance
            first_half = stat_values[:len(stat_values)//2].mean()
            second_half = stat_values[len(stat_values)//2:].mean()
            trend_pct = round((second_half - first_half) / first_half * 100 if first_half > 0 else 0, 1)
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown(f"""
                <div class='metric-container'>
                    <div class='metric-value'>{round(stat_values.mean(), 2)}</div>
                    <div class='metric-label'>Moyenne sur la p√©riode</div>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                st.markdown(f"""
                <div class='metric-container'>
                    <div class='metric-value'>{round(second_half, 2)}</div>
                    <div class='metric-label'>Moyenne r√©cente</div>
                </div>
                """, unsafe_allow_html=True)
            
            with col3:
                trend_class = "positive-trend" if trend_pct > 0 else "negative-trend"
                trend_sign = "+" if trend_pct > 0 else ""
                st.markdown(f"""
                <div class='metric-container'>
                    <div class='metric-value {trend_class}'>{trend_sign}{trend_pct}%</div>
                    <div class='metric-label'>Tendance</div>
                </div>
                """, unsafe_allow_html=True)
            
            # Chronologie annot√©e
            st.subheader("Chronologie annot√©e des √©v√©nements cl√©s")
            
            # Cr√©er une chronologie fictive
            timeline_data = [
                {"date": "2023-08-15", "event": "D√©but de saison", "description": "Premier match de la saison"},
                {"date": "2023-09-10", "event": "Premier but", "description": "Premier but de la saison contre l'√©quipe X"},
                {"date": "2023-10-05", "event": "Blessure l√©g√®re", "description": "Blessure musculaire mineure, absent pour 1 match"},
                {"date": "2023-11-20", "event": "Changement tactique", "description": "Changement de position suite √† une nouvelle strat√©gie de l'entra√Æneur"},
                {"date": "2023-12-15", "event": "Performance exceptionnelle", "description": "Homme du match avec 2 buts et 1 passe d√©cisive"},
                {"date": "2024-02-10", "event": "Retour de blessure", "description": "Retour apr√®s 3 semaines d'absence"},
                {"date": "2024-03-05", "event": "Milestone", "description": "10√®me but de la saison, toutes comp√©titions confondues"}
            ]
            
            # Cr√©er un dataframe pour la chronologie
            timeline_df = pd.DataFrame(timeline_data)
            timeline_df['date'] = pd.to_datetime(timeline_df['date'])
            timeline_df = timeline_df.sort_values('date')
            
            # Afficher la chronologie
            for i, event in timeline_df.iterrows():
                col1, col2 = st.columns([1, 3])
                with col1:
                    st.markdown(f"**{event['date'].strftime('%d %b %Y')}**")
                    st.markdown(f"*{event['event']}*")
                with col2:
                    st.markdown(f"{event['description']}")
                st.markdown("---")
        
        # Onglet 4: Analyse Contextuelle
        with tab4:
            st.markdown("<h2 class='sub-header'>Analyse Contextuelle</h2>", unsafe_allow_html=True)
            
            # S√©lection du contexte d'analyse
            context_type = st.radio(
                "Contexte d'analyse",
                options=["Domicile vs Ext√©rieur", "Niveau d'adversaire", "Phase de jeu", "Position sur le terrain"],
                horizontal=True
            )
            
            if context_type == "Domicile vs Ext√©rieur":
                # Cr√©er des donn√©es fictives pour la comparaison domicile/ext√©rieur
                metrics = ["Buts", "Passes d√©cisives", "Tirs", "Passes r√©ussies (%)", "Duels gagn√©s (%)", "Distance (km)"]
                
                home_values = [
                    np.random.randint(0, 10),  # Buts
                    np.random.randint(0, 8),   # Passes d√©cisives
                    np.random.randint(10, 40), # Tirs
                    np.random.randint(70, 90), # Passes r√©ussies (%)
                    np.random.randint(50, 70), # Duels gagn√©s (%)
                    round(np.random.uniform(8, 12), 1)  # Distance (km)
                ]
                
                away_values = [
                    np.random.randint(0, 10),  # Buts
                    np.random.randint(0, 8),   # Passes d√©cisives
                    np.random.randint(10, 40), # Tirs
                    np.random.randint(70, 90), # Passes r√©ussies (%)
                    np.random.randint(50, 70), # Duels gagn√©s (%)
                    round(np.random.uniform(8, 12), 1)  # Distance (km)
                ]
                
                # Cr√©er le dataframe pour la comparaison
                context_data = pd.DataFrame({
                    'M√©trique': metrics,
                    'Domicile': home_values,
                    'Ext√©rieur': away_values
                })
                
                # Afficher le tableau
                st.dataframe(context_data, use_container_width=True)
                
                # Cr√©er le graphique √† barres
                fig = px.bar(
                    context_data,
                    x='M√©trique',
                    y=['Domicile', 'Ext√©rieur'],
                    barmode='group',
                    title=f"Performances de {selected_player1} √† domicile vs √† l'ext√©rieur"
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # Analyse des diff√©rences
                home_better = sum([1 for i in range(len(metrics)) if home_values[i] > away_values[i]])
                away_better = sum([1 for i in range(len(metrics)) if away_values[i] > home_values[i]])
                
                if home_better > away_better:
                    st.info(f"**{selected_player1}** semble √™tre plus performant √† domicile, avec de meilleures statistiques dans {home_better} cat√©gories sur {len(metrics)}.")
                elif away_better > home_better:
                    st.info(f"**{selected_player1}** semble √™tre plus performant √† l'ext√©rieur, avec de meilleures statistiques dans {away_better} cat√©gories sur {len(metrics)}.")
                else:
                    st.info(f"**{selected_player1}** montre des performances √©quilibr√©es √† domicile et √† l'ext√©rieur.")
            
            elif context_type == "Niveau d'adversaire":
                # Cr√©er des donn√©es fictives pour la comparaison selon le niveau d'adversaire
                metrics = ["Buts", "Passes d√©cisives", "Tirs", "Passes r√©ussies (%)", "Duels gagn√©s (%)", "Distance (km)"]
                
                top_values = [
                    np.random.randint(0, 5),   # Buts
                    np.random.randint(0, 5),   # Passes d√©cisives
                    np.random.randint(5, 20),  # Tirs
                    np.random.randint(70, 85), # Passes r√©ussies (%)
                    np.random.randint(45, 65), # Duels gagn√©s (%)
                    round(np.random.uniform(9, 12), 1)  # Distance (km)
                ]
                
                mid_values = [
                    np.random.randint(0, 8),   # Buts
                    np.random.randint(0, 6),   # Passes d√©cisives
                    np.random.randint(10, 30), # Tirs
                    np.random.randint(75, 90), # Passes r√©ussies (%)
                    np.random.randint(50, 70), # Duels gagn√©s (%)
                    round(np.random.uniform(8, 11), 1)  # Distance (km)
                ]
                
                bottom_values = [
                    np.random.randint(0, 10),  # Buts
                    np.random.randint(0, 8),   # Passes d√©cisives
                    np.random.randint(15, 40), # Tirs
                    np.random.randint(80, 95), # Passes r√©ussies (%)
                    np.random.randint(55, 75), # Duels gagn√©s (%)
                    round(np.random.uniform(7, 10), 1)  # Distance (km)
                ]
                
                # Cr√©er le dataframe pour la comparaison
                context_data = pd.DataFrame({
                    'M√©trique': metrics,
                    'Top 6': top_values,
                    'Milieu de tableau': mid_values,
                    'Bas de tableau': bottom_values
                })
                
                # Afficher le tableau
                st.dataframe(context_data, use_container_width=True)
                
                # Cr√©er le graphique √† barres
                fig = px.bar(
                    context_data,
                    x='M√©trique',
                    y=['Top 6', 'Milieu de tableau', 'Bas de tableau'],
                    barmode='group',
                    title=f"Performances de {selected_player1} selon le niveau d'adversaire"
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # Analyse des performances
                st.markdown("""
                <div class='card'>
                    <h3>Analyse des performances selon le niveau d'adversaire</h3>
                    <p>Cette analyse montre comment les performances du joueur varient en fonction du niveau de l'adversaire.</p>
                    <p>Les diff√©rences observ√©es peuvent indiquer :</p>
                    <ul>
                        <li>La capacit√© du joueur √† s'√©lever au niveau de la comp√©tition</li>
                        <li>Les types d'adversaires contre lesquels le joueur est le plus efficace</li>
                        <li>Les ajustements tactiques potentiels selon l'adversaire</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)
            
            elif context_type == "Phase de jeu":
                # Cr√©er des donn√©es fictives pour la r√©partition des actions par phase de jeu
                phases = ["Organisation offensive", "Transition offensive", "Organisation d√©fensive", "Transition d√©fensive", "Coups de pied arr√™t√©s"]
                
                # G√©n√©rer des valeurs al√©atoires pour chaque phase
                values = np.random.randint(10, 100, len(phases))
                total = sum(values)
                percentages = [round(v / total * 100, 1) for v in values]
                
                # Cr√©er le dataframe pour la r√©partition
                phase_data = pd.DataFrame({
                    'Phase de jeu': phases,
                    'Actions': values,
                    'Pourcentage': percentages
                })
                
                # Afficher le tableau
                st.dataframe(phase_data, use_container_width=True)
                
                # Cr√©er le graphique en secteurs
                fig = px.pie(
                    phase_data,
                    values='Pourcentage',
                    names='Phase de jeu',
                    title=f"R√©partition des actions de {selected_player1} par phase de jeu"
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # Analyse de l'efficacit√© par phase
                st.subheader("Efficacit√© par phase de jeu")
                
                # G√©n√©rer des donn√©es fictives pour l'efficacit√©
                efficiency_data = pd.DataFrame({
                    'Phase de jeu': phases,
                    'Efficacit√© (%)': [np.random.randint(50, 90) for _ in range(len(phases))]
                })
                
                # Cr√©er le graphique √† barres pour l'efficacit√©
                fig = px.bar(
                    efficiency_data,
                    x='Phase de jeu',
                    y='Efficacit√© (%)',
                    title=f"Efficacit√© de {selected_player1} par phase de jeu"
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # Recommandations tactiques
                st.markdown("""
                <div class='card'>
                    <h3>Recommandations tactiques</h3>
                    <p>Bas√©es sur l'analyse des phases de jeu, voici quelques recommandations tactiques :</p>
                    <ul>
                        <li>Maximiser l'implication du joueur dans les phases o√π il est le plus efficace</li>
                        <li>Travailler sur l'am√©lioration des phases o√π l'efficacit√© est plus faible</li>
                        <li>Adapter le r√¥le du joueur en fonction des forces identifi√©es par phase</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)
            
            else:  # Position sur le terrain
                st.subheader("Zones d'influence sur le terrain")
                
                # Cr√©er un terrain de football pour la heatmap
                pitch_length = 120
                pitch_width = 80
                
                fig, ax = plt.subplots(figsize=(12, 8))
                
                # Dessiner le terrain
                # Rectangle principal
                ax.plot([0, 0, pitch_length, pitch_length, 0], [0, pitch_width, pitch_width, 0, 0], color='black')
                
                # Ligne m√©diane
                ax.plot([pitch_length/2, pitch_length/2], [0, pitch_width], color='black')
                
                # Cercle central
                central_circle = plt.Circle((pitch_length/2, pitch_width/2), 9.15, fill=False, color='black')
                ax.add_artist(central_circle)
                
                # Surfaces de r√©paration
                # Gauche
                ax.plot([0, 16.5, 16.5, 0], [pitch_width/2 - 20.15, pitch_width/2 - 20.15, pitch_width/2 + 20.15, pitch_width/2 + 20.15], color='black')
                # Droite
                ax.plot([pitch_length, pitch_length - 16.5, pitch_length - 16.5, pitch_length], [pitch_width/2 - 20.15, pitch_width/2 - 20.15, pitch_width/2 + 20.15, pitch_width/2 + 20.15], color='black')
                
                # Surfaces de but
                # Gauche
                ax.plot([0, 5.5, 5.5, 0], [pitch_width/2 - 9.16, pitch_width/2 - 9.16, pitch_width/2 + 9.16, pitch_width/2 + 9.16], color='black')
                # Droite
                ax.plot([pitch_length, pitch_length - 5.5, pitch_length - 5.5, pitch_length], [pitch_width/2 - 9.16, pitch_width/2 - 9.16, pitch_width/2 + 9.16, pitch_width/2 + 9.16], color='black')
                
                # Points de penalty
                ax.plot(11, pitch_width/2, marker='o', markersize=2, color='black')
                ax.plot(pitch_length - 11, pitch_width/2, marker='o', markersize=2, color='black')
                
                # G√©n√©rer des donn√©es fictives pour la heatmap
                # Simuler diff√©rentes distributions selon la position du joueur
                position = np.random.choice(["Attaquant", "Milieu", "D√©fenseur"])
                
                if position == "Attaquant":
                    # Concentration dans la moiti√© offensive
                    x = np.random.normal(3*pitch_length/4, pitch_length/6, 500)
                    y = np.random.normal(pitch_width/2, pitch_width/4, 500)
                elif position == "Milieu":
                    # Concentration au milieu du terrain
                    x = np.random.normal(pitch_length/2, pitch_length/4, 500)
                    y = np.random.normal(pitch_width/2, pitch_width/3, 500)
                else:  # D√©fenseur
                    # Concentration dans la moiti√© d√©fensive
                    x = np.random.normal(pitch_length/4, pitch_length/6, 500)
                    y = np.random.normal(pitch_width/2, pitch_width/4, 500)
                
                # Cr√©er la heatmap
                heatmap = ax.hexbin(x, y, gridsize=30, cmap='YlOrRd', alpha=0.7)
                plt.colorbar(heatmap, ax=ax, label='Densit√©')
                
                ax.set_xlim(-5, pitch_length + 5)
                ax.set_ylim(-5, pitch_width + 5)
                ax.set_title(f"Zones d'influence de {selected_player1}")
                ax.set_xlabel("Longueur du terrain (m)")
                ax.set_ylabel("Largeur du terrain (m)")
                ax.set_aspect('equal')
                
                # Afficher la heatmap
                st.pyplot(fig)
                
                # Analyse des zones d'influence
                st.markdown("""
                <div class='card'>
                    <h3>Analyse des zones d'influence</h3>
                    <p>Cette heatmap montre les zones du terrain o√π le joueur est le plus actif. Les zones en rouge indiquent une forte concentration d'actions, tandis que les zones en jaune indiquent une concentration plus faible.</p>
                    <p>L'analyse des zones d'influence peut aider √† :</p>
                    <ul>
                        <li>Comprendre le r√¥le r√©el du joueur sur le terrain</li>
                        <li>Identifier les zones o√π le joueur est le plus efficace</li>
                        <li>Adapter le syst√®me tactique pour maximiser l'impact du joueur</li>
                        <li>D√©tecter les d√©s√©quilibres potentiels dans la couverture du terrain</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)
                
                # Statistiques par zone
                st.subheader("Statistiques par zone du terrain")
                
                # Cr√©er des donn√©es fictives pour les statistiques par zone
                zones = ["Tiers d√©fensif", "Milieu de terrain", "Tiers offensif"]
                
                # G√©n√©rer des statistiques al√©atoires pour chaque zone
                zone_stats = pd.DataFrame({
                    'Zone': zones,
                    'Actions': [np.random.randint(10, 100) for _ in range(len(zones))],
                    'R√©ussite (%)': [np.random.randint(50, 90) for _ in range(len(zones))],
                    'Duels gagn√©s (%)': [np.random.randint(40, 80) for _ in range(len(zones))],
                    'Passes cl√©s': [np.random.randint(0, 20) for _ in range(len(zones))]
                })
                
                # Afficher le tableau
                st.dataframe(zone_stats, use_container_width=True)
    else:
        st.warning(f"Aucun joueur trouv√© pour l'√©quipe {selected_team}. Veuillez s√©lectionner une autre √©quipe.")

except Exception as e:
    st.error(f"Une erreur s'est produite: {e}")
    st.info("Assurez-vous d'avoir acc√®s aux donn√©es StatsBomb et que les API sont correctement configur√©es.")
